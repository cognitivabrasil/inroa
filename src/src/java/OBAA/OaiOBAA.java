/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 * 
 * 
 */
package OBAA;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.OutputStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;
import metadata.DublinCore;
import metadata.Header;
import metadata.Request;
import metadata.TextElement;

import org.apache.log4j.Logger;
import org.simpleframework.xml.Attribute;
import org.simpleframework.xml.Element;
import org.simpleframework.xml.ElementList;
import org.simpleframework.xml.Root;
import org.simpleframework.xml.Serializer;
import org.simpleframework.xml.core.Persister;
import org.simpleframework.xml.Namespace;
import org.simpleframework.xml.NamespaceList;
import org.simpleframework.xml.Text;

/**
 * 
 * @author paulo
 * 
 */

/* TODO: Usar um gerador de c√≥digo */
@Root(name = "metadata", strict = false)
class Metadata {

	@Element
	OBAA obaa;

	Metadata() {
		super();
	}

	OBAA getLom() {
		return obaa;
	}
}

@Root(name = "resumptionToken", strict = false)
class ResumptionToken {

	@Attribute(required = false)
	private String expirationDate;

	@Text
	private String token;

	ResumptionToken() {
	}

	/**
	 * @return the expirationDate
	 */
	public String getExpirationDate() {
		return expirationDate;
	}

	/**
	 * @param expirationDate
	 *            the expirationDate to set
	 */
	public void setExpirationDate(String expirationDate) {
		this.expirationDate = expirationDate;
	}

	/**
	 * @return the token
	 */
	public String getToken() {
		return token;
	}

	/**
	 * @param token
	 *            the token to set
	 */
	public void setToken(String token) {
		this.token = token;
	}

}

@Root(name = "record", strict = false)
class Record {

	@Element(required = false)
	private metadata.Header header;

	@Element(required = false)
	Metadata metadata;

	Record() {
		super();
	}

	Metadata getMetadata() {
		return metadata;
	}

	/**
	 * @return the header
	 */
	public metadata.Header getHeader() {
		return header;
	}

}

@Root(name = "error")
class Error {
	@Attribute
	String code;
	@Text
	String description;

	public String getCode() {
		return code;
	}

	public String getDescription() {
		return description;
	}
}

@Root(name = "OAI-PMH", strict = false)
@NamespaceList({
		@Namespace(reference = "http://www.openarchives.org/OAI/2.0/"),
		@Namespace(reference = "http://www.w3.org/2001/XMLSchema-instance", prefix = "xsi") })
public class OaiOBAA {
	static Logger log = Logger.getLogger(OaiOBAA.class.getName());

	@Element
	private String responseDate;

	@Element
	Request request;

	@Element(required = false)
	private Error error;

	@ElementList(required = false)
	private List<Record> ListRecords;

	OaiOBAA() {
		super();
	}

	private List<String> toStringList(List<? extends TextElement> elements) {
		List<String> s = new ArrayList<String>();
		for (TextElement e : elements) {
			s.add(e.getText());
		}
		return s;
	}

	/**
	 * Parses an OAI OOBAA file.
	 * 
	 * You should try and use this version and pass it the OAI Url, so as to
	 * generate better error messages.
	 * 
	 * @param filename
	 *            Oai OBAA XML file
	 * @return {@link OBAAA} object generated by unserializing filename.
	 * @throws OaiException
	 *             if some OAI error occurs
	 */
	public static OaiOBAA fromFilenameWithUrl(String filename, String url)
			throws FileNotFoundException {
		return fromReaderWithUrl(new FileReader(new File(filename)), url);
	}

	public static OaiOBAA fromFilename(String filename)
			throws FileNotFoundException {
		return fromReader(new FileReader(new File(filename)));
	}
        
        public static OaiOBAA fromFile(File file)
			throws FileNotFoundException {
		return fromReader(new FileReader(file));
	}

	public static OaiOBAA fromString(String s) {
		return fromReader(new StringReader(s));
	}

	public static OaiOBAA fromReaderWithUrl(Reader s, String url) {
		OaiOBAA dc = new OaiOBAA();
		Serializer serializer = new Persister();

		try {
			dc = serializer.read(OaiOBAA.class, s);
		} catch (java.lang.Exception e) {
			throw new RuntimeException(e);
		}

		// check Oai exceptions
		if (dc.getError() != null) {
			if ("noRecordsMatch".equals(dc.getError().getCode())) {
				// this is not really an error, return empty set
				dc.ListRecords = new ArrayList<Record>();
				log.info("Got noRecords match on URL " + url);
			} else if ("cannotDisseminateFormat"
					.equals(dc.getError().getCode())) {
				throw new OaiCannotDisseminateFormatException(dc.getError()
						.getDescription(), url);
			} else {
				throw new OaiException(dc.getError().getCode(), dc.getError()
						.getDescription(), url);
			}
		}

		return dc;
	}

	@Deprecated
	public static OaiOBAA fromReader(Reader s) {
		return fromReaderWithUrl(s, "no url informed");
	}

	public void toFilename(String filename) throws FileNotFoundException {
		try {
			toWriter(new FileWriter(new File(filename)));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public String toString() {
		StringWriter s = new StringWriter();
		toWriter(s);
		return s.toString();
	}

	public void toWriter(Writer s) {
		Serializer serializer = new Persister();
		try {
			serializer.write(this, s);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Gets the size.
	 * 
	 * @return the number of ListRecords present in the OAI File.
	 */
	public int getSize() {
		return ListRecords.size();
	}

	/**
	 * Gets the metadata (OBAA).
	 * 
	 * @param index
	 *            the index
	 * @return the metadata in OBAA format or NULL in case it represents a
	 *         deleted document.
	 */
	public OBAA getMetadata(int index) {
		if (ListRecords.get(index).getMetadata() != null) {
			return ListRecords.get(index).getMetadata().getLom();
		} else {
			return null;
		}
	}

	public Header getHeader(int index) {
		return ListRecords.get(index).getHeader();
	}

	public Request getRequest() {
		return request;
	}

	/**
	 * 
	 * @return {@link String} containing the XML correspondin to the current
	 *         object.
	 * @throws Exception
	 *             In case a serializing error occurs
	 */
	public String toXml() throws Exception {
		OutputStream o = new ByteArrayOutputStream();
		Serializer serializer = new Persister();
		serializer.write(this, o);

		return o.toString();
	}

	/**
	 * @return the responseDate
	 */
	public String getResponseDate() {
		return responseDate;
	}

	/**
	 * @param responseDate
	 *            the responseDate to set
	 */
	public void setResponseDate(String responseDate) {
		this.responseDate = responseDate;
	}

	/**
	 * @return the error
	 */
	Error getError() {
		return error;
	}

	/**
	 * @param error
	 *            the error to set
	 */
	void setError(Error error) {
		this.error = error;
	}
}
