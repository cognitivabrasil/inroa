/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 * 
 * 
 */
package OBAA;

import OBAA.Educational.Educational;
import OBAA.LifeCycle.LifeCycle;
import OBAA.General.General;
import OBAA.Rights.Rights;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.OutputStream;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import metadata.DublinCore;
import metadata.TextElement;
import org.simpleframework.xml.Attribute;
import org.simpleframework.xml.Element;
import org.simpleframework.xml.Root;
import org.simpleframework.xml.Serializer;
import org.simpleframework.xml.core.Persister;
import org.simpleframework.xml.Namespace;
import org.simpleframework.xml.NamespaceList;

/**
 *
 * @author paulo
 * 
 */


/* TODO: Usar um gerador de código */


@Root(name="oai_obaa:obaa", strict=false)
@NamespaceList({
@Namespace(reference="http://ltsc.ieee.org/xsd/LOM", prefix="obaa"),
@Namespace(reference="http://www.w3.org/2001/XMLSchema-instance", prefix="xsi")})
public class OBAA {
	
@Attribute(name="xsi:schemaLocation", empty="http://ltsc.ieee.org/xsd/LOM http://ltsc.ieee.org/xsd/obaav1.0/lom.xsd", required=false)
	private String xsi_schema; //não é muito elegante, mas funciona.
	
	@Element(required=true)
	private General general;
	
	@Element(required=false)
	private LifeCycle lifeCycle;

	@Element(required=false)
	private Rights rights;

	@Element(required=false)
	private Educational educational;

	/**
 	* Creates an empty DublinCore objetct.
	 */
	public OBAA() {
		super();
	}

	private List<String> toStringList(List<? extends TextElement> elements) {
		List<String> s = new ArrayList<String>();
		for(TextElement e : elements) {
			s.add(e.getText());
		}
		return s;
	}
	
	/**
	 * 
	 * @param filename Dublin Core XML file
	 * @return {@link DublinCore} object generated by unserializing filename.
	 */
	public static OBAA fromFilename(String filename) throws FileNotFoundException {
		return fromReader(new FileReader(new File(filename)));
	}
	
	public static OBAA fromString(String s) {
		return fromReader(new StringReader(s));
	}
	
	public static OBAA fromReader(Reader s) {
		OBAA dc = new OBAA();
		Serializer serializer = new Persister();

		try {	
			dc = serializer.read(OBAA.class, s);
		}
		catch(java.lang.Exception e) {
			e.printStackTrace();
		}
		
		return dc;
	}

	
	public General getGeneral() {
		return general;
	}
        
        public void setGeneral(General g) {
            general = g;
        }

	public LifeCycle getLifeCycle() {
		return lifeCycle;
	}

	public List<String> getTitles() {
		return toStringList(getGeneral().getTitles());
	}
        
	
	public List<String> getKeywords() {
		return getGeneral().getKeywords();
	}

	//public List<String> getTitles() {
	//	return toStringList(title);
	//}
	
	//public void addTitle(String title) {
	//	this.title.add(new Title(title));
	//}


	/**
	 * 
	 * @return {@link String} containing the XML correspondin to the current object.
	 * @throws Exception In case a serializing error occurs
	 */
	public String toXml() throws Exception {
		OutputStream o = new ByteArrayOutputStream();
		Serializer serializer = new Persister();
		serializer.write(this, o);
		
		return o.toString();
	}

	/**
	 * @return the rights
	 */
	public Rights getRights() {
		return rights;
	}

	/**
	 * @param rights the rights to set
	 */
	public void setRights(Rights rights) {
		this.rights = rights;
	}

	/**
	 * @return the educational
	 */
	public Educational getEducational() {
		return educational;
	}

	/**
	 * @param educational the educational to set
	 */
	public void setEducational(Educational educational) {
		this.educational = educational;
	}
}
